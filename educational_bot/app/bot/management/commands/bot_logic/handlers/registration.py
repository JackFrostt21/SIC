from aiogram import types
from aiogram.dispatcher import FSMContext
from asgiref.sync import sync_to_async
import re

from app.bot.management.commands.bot_logic.kb.main_kb import building_main_menu
from app.bot.management.commands.loader import dp
from app.bot.management.commands.bot_logic.lang_middleware import setup_middleware
from app.bot.management.commands.bot_logic.functions import user_set_language, load_bot_logo

from app.bot.management.commands.bot_logic.states import LocaleRegSteps
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton

from app.bot.models.telegram_user import TelegramUser
from app.educational_module.models import Company

i18n = setup_middleware(dp)
_ = i18n.gettext


def is_email(text):
    try:
        pattern = '^[\w\.\-]+@([\w-]+\.)+[\w-]{2,4}$'
        if re.match(pattern, text):
            return True
        else:
            return False
    except Exception as e:
        print(e)


async def soft_state_finish(state: FSMContext):
    fields = ["action", "Yes_No"]
    data = await state.get_data()
    data = {key: value for key, value in data.items() if key not in fields}
    await state.set_data(data)
    await state.set_state(None)


@sync_to_async
def user_set_info(user_id, full_name, date_of_birth, phone):
    user = TelegramUser.objects.get(user_id=user_id)
    user.state = 1  # –¥–æ–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
    user.full_name = full_name
    user.date_of_birth = date_of_birth
    user.phone = phone
    user.save()


"""
–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. 
–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é user_set_language, 
—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏. 
–ó–∞—Ç–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞ LocaleRegSteps.enter_date_birth.
"""
@dp.message_handler(state=LocaleRegSteps.set_language)
async def set_language(message: types.Message):
    try:
        match message.text:
            case 'üá∑üá∫–†—É—Å—Å–∫–∏–π':
                await user_set_language(message.from_user.id, "ru")
                await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', reply_markup=ReplyKeyboardRemove())

            case "üá∫üáøO'zbek":
                await user_set_language(message.from_user.id, "uz")
                await message.answer(text='Iltimos, to ªliq ismingizni kiriting', reply_markup=ReplyKeyboardRemove())
            case 'üá¨üáßEnglish':
                await user_set_language(message.from_user.id, 'en')
                await message.answer(text='Please share your name', reply_markup=ReplyKeyboardRemove())
        await LocaleRegSteps.enter_date_birth.set()
    except Exception as e:
        print(e)


"""
–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
–û–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è, 
–∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ LocaleRegSteps.enter_phone.
"""
@dp.message_handler(state=LocaleRegSteps.enter_date_birth)
async def enter_date_birth(message: types.Message, state: FSMContext):
    try:
        await state.update_data(name=message.text)
        await message.answer(text=_('Please enter date_of_birth'), reply_markup=ReplyKeyboardRemove())
        await LocaleRegSteps.enter_phone.set()
    except Exception as e:
        print(e)


"""
–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. 
–û–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, 
–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. 
–ó–∞—Ç–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞ LocaleRegSteps.registration_finish.
"""
@dp.message_handler(state=LocaleRegSteps.enter_phone)
async def enter_phone(message: types.Message, state: FSMContext):
    try:
        await state.update_data(birth=message.text)
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton(_('Share contact'), request_contact=True))

        await message.answer(text=_('Please enter share contact'), reply_markup=kb)
        await LocaleRegSteps.registration_finish.set()
    except Exception as e:
        print(e)


"""
–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. 
–û–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, 
–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ user_set_info. 
–ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥–æ—Ç–∏–ø –±–æ—Ç–∞, —Å–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ç–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, 
–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.
"""
@dp.message_handler(content_types=types.ContentType.ANY, state=LocaleRegSteps.registration_finish)
async def registration_finish(message: types.Message, state: FSMContext):
    try:
        if message.contact:
            await state.update_data(phone=message.contact.phone_number)
        if message.text:
            await state.update_data(phone=message.text)
        data = await state.get_data()
        enter_full_name = data.get('name')
        date_birth = data.get('birth')
        phone = data.get('phone')
        await user_set_info(message.from_user.id, enter_full_name, date_birth, phone)
        title, content, photo = await load_bot_logo('welcome_logo', message.from_user.id)
        menu_keyboard = await building_main_menu(message.from_user.id)
        media = types.InputFile(photo)
        await message.answer_photo(photo=media,
                                   caption=f'{title}\n'
                                           f'{content}'
                                           f'<i>{message.from_user.full_name}</i>'
                                           f' <code>{message.from_user.mention}</code>',
                                   reply_markup=menu_keyboard)
        await soft_state_finish(state)

    except Exception as e:
        print(e)