"""
    Router:
        Router используется для организации обработчиков сообщений, колбэк-запросов и других типов обновлений, которые получает бот.
        С помощью Router можно группировать обработчики, создавать сложные маршруты и управлять ими в зависимости от условий и контекста.
        Это помогает структурировать логику бота, делая код более читаемым и легким для поддержки.

    types:
        types предоставляет классы для различных типов объектов, с которыми работает Telegram Bot API, таких как Message, User, CallbackQuery и многие другие.
        Эти классы используются для представления данных, которые бот получает от Telegram, и для формирования ответов, которые бот отправляет обратно.

    F:
        F представляет собой функциональный инструмент, который используется для создания фильтров и условий внутри обработчиков.
        С помощью F можно создавать сложные запросы и фильтры, например, для проверки содержимого сообщений, статуса пользователя и других параметров.
        Это позволяет боту реагировать только на определенные сообщения или события, удовлетворяющие заданным условиям.

    filters:
        Модуль filters предоставляет набор готовых фильтров, которые можно использовать для предварительной обработки сообщений и запросов, поступающих к боту.
        Фильтры могут автоматически отсеивать нерелевантные сообщения, проверять команды, контент сообщений и многое другое.
        Использование фильтров упрощает логику обработчиков, позволяя фокусироваться на обработке только тех сообщений, которые соответствуют определенным критериям.
"""

from aiogram import Router, types, F, filters

"""
    ReplyKeyboardBuilder предоставляет удобный интерфейс для построения клавиатур, которые могут быть отправлены пользователю вместе с сообщением.
    Он позволяет добавлять кнопки в клавиатуру, управлять их расположением и настройками, не вдаваясь в детали низкоуровневого формата JSON, который используется Telegram Bot API для описания клавиатур.

Функциональность:

    С помощью методов ReplyKeyboardBuilder, таких как add(), row(), adjust(), можно легко добавлять кнопки, организовывать их в ряды и колонки, а также настраивать другие параметры клавиатуры.
    Это позволяет создавать как простые клавиатуры с несколькими кнопками, так и более сложные интерактивные интерфейсы для управления ботом.

Интеграция с сообщениями:

    Построенные с помощью ReplyKeyboardBuilder клавиатуры могут быть легко интегрированы с сообщениями, отправляемыми ботом, благодаря методу as_markup().
    Этот метод возвращает клавиатуру в формате, который может быть непосредственно использован в параметре reply_markup при отправке сообщения через методы send_message, answer и другие.
"""
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from icecream import ic

#функция, предположительно проверяющая существование пользователя в базе данных или каком-то хранилище
from core.management.commands.functions.user_logic import user_exists

router = Router()

#регистрирует асинхронную функцию start_cmd как обработчик сообщений, которые являются командой /start.
@router.message(filters.CommandStart())
async def start_cmd(message: types.Message):

    #Вызывается функция user_exists с данными пользователя, и результат логируется с помощью ic
    ic(await user_exists(message.from_user.id, message.from_user.full_name, message.from_user.username))

    kb_builder = ReplyKeyboardBuilder()
    for i in range(1, 9):
        #Добавляем кнопки 1-8
        kb_builder.add(types.KeyboardButton(text=str(i)))

    #Добавляем кнопку main_menu
    kb_builder.add(types.KeyboardButton(text='main_menu'))

    #количество кнопок в ряду
    kb_builder.adjust(4)
    await message.answer(
        "Main menu:",
        reply_markup=kb_builder.as_markup(resize_keyboard=True),
    )

#декоратор регистрирует функцию echo_callback как обработчик колбэк-запросов, где поле data равно 'data'
@router.callback_query(F.data == 'data')
async def echo_callback(callback: types.CallbackQuery):
    await callback.answer(text='data!!!', show_alert=True)
