from typing import Dict, Any, List, Optional
from aiogram import Router, F, Bot
from aiogram.types import (
    CallbackQuery,
    FSInputFile,
    Message,
    InlineKeyboardButton,
    WebAppInfo,
)
from aiogram.fsm.context import FSMContext
import os
import logging

from app.bot.telegram.deps import UserService
from app.learning_app.repositories import CourseRepository
from app.learning_app.services.course_content_service import CourseContentService
from app.bot.telegram.keyboards.builders import InlineKeyboardBuilder
from app.bot.telegram.utils.text_formatters import (
    clean_html_for_telegram,
    paginate_text,
)
from app.organization.repositories import SettingsBotRepository
from aiogram.filters import Command
from app.bot.telegram.callback.schemas import CourseMenuCallback

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
router = Router(name="main_menu_router")


logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
course_repo = CourseRepository()
settings_repo = SettingsBotRepository()


async def _send_courses_list(
    telegram_id: int,
    course_content_service: CourseContentService,
    message_sender,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å message –∏–ª–∏ callback.message
    add_back_button: bool = False,
) -> None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤.
    –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback'–æ–≤.
    """
    logger.info(f"Sending courses list for telegram_id: {telegram_id}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
    logger.info("Fetching available courses...")
    courses_data = await course_content_service.course_repository.get_available_courses(
        telegram_id
    )
    logger.info(f"Courses data received: {courses_data}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤
    logger.info("Fetching list courses image path...")
    list_courses_image_path = await settings_repo.get_list_courses_image_path()
    logger.info(f"List courses image path: {list_courses_image_path}")

    if not courses_data:
        logger.info("No courses data found.")
        # –ï—Å–ª–∏ –∫—É—Ä—Å–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
        no_courses_text = (
            "<b>üìö –ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –æ–±—É—á–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )

        if list_courses_image_path and os.path.exists(list_courses_image_path):
            logger.info(
                f"Image path exists: {list_courses_image_path}. Sending photo with no courses message."
            )
            await message_sender.answer_photo(
                photo=FSInputFile(list_courses_image_path),
                caption=no_courses_text,
            )
        else:
            logger.info(
                "Image path does not exist or not provided. Sending text message with no courses."
            )
            await message_sender.answer(no_courses_text)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        logger.info(f"Courses data found: {len(courses_data)} courses.")
        courses_text = "<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è:</b>\n\n"
        buttons = []

        for item in courses_data:
            course = item["course"]
            test_status = item["test_status"]
            test_score = item["test_score"]

            prefix = ""
            if test_status == "completed_passed":
                prefix = f"‚úîÔ∏è "
            elif test_status == "completed_failed":
                prefix = f"‚ùå "

            course_title = f"{prefix}{course.title}"
            if test_score is not None:
                course_title += f" ({test_score}%)"

            # # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –≤ —Ç–µ–∫—Å—Ç
            # courses_text += f"<b>{course_title}</b>\n"
            # courses_text += (
            #     f"{course.description[:100]}...\n\n" if course.description else "\n"
            # )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫—É—Ä—Å–∞
            buttons.append([(f"üìñ {course_title}", f"course:{course.id}")])

        # # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        # buttons.append([("üîô –ù–∞–∑–∞–¥", "back_to_main_menu")])

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
        courses_keyboard = InlineKeyboardBuilder.create_inline_kb(buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫—É—Ä—Å–æ–≤
        if list_courses_image_path and os.path.exists(list_courses_image_path):
            logger.info(
                f"Image path exists: {list_courses_image_path}. Sending photo with courses list."
            )
            await message_sender.answer_photo(
                photo=FSInputFile(list_courses_image_path),
                caption=courses_text,
                reply_markup=courses_keyboard,
            )
        else:
            logger.info(
                "Image path does not exist or not provided. Sending text message with courses list."
            )
            await message_sender.answer(courses_text, reply_markup=courses_keyboard)


@router.message(F.text == "üìö –ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è")
@router.message(Command("courses"))
async def process_courses_message(
    message: Message,
    state: FSMContext,
    user_service: UserService,
    course_content_service: CourseContentService,
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è" –∏–∑ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    """
    logger.info("Entering process_courses_message handler")

    telegram_id = message.from_user.id
    logger.info(f"Telegram ID: {telegram_id}")

    await _send_courses_list(
        telegram_id=telegram_id,
        course_content_service=course_content_service,
        message_sender=message,
        add_back_button=False,
    )


@router.callback_query(F.data == "courses_list")
async def process_courses_button(
    callback: CallbackQuery,
    state: FSMContext,
    user_service: UserService,
    course_content_service: CourseContentService,
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è" —á–µ—Ä–µ–∑ callback
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    """
    logger.info("Entering process_courses_button handler")
    await callback.answer()

    telegram_id = callback.from_user.id
    logger.info(f"Telegram ID: {telegram_id}")

    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
        logger.info("Previous message deleted successfully.")
    except Exception as e:
        logger.error(f"Error deleting previous message: {e}")

    await _send_courses_list(
        telegram_id=telegram_id,
        course_content_service=course_content_service,
        message_sender=callback.message,
        add_back_button=True,
    )


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from app.bot.telegram.keyboards.main_kb import get_main_menu_keyboard

    # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    main_menu_keyboard = await get_main_menu_keyboard(callback.from_user.id)

    # TODO: —É–±—Ä–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–æ–∫, –Ω—É–∂–µ–Ω –∏–ª–∏ –Ω–µ—Ç
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
        reply_markup=main_menu_keyboard,
    )

    await callback.answer()


@router.callback_query(F.data.startswith("course:"))
async def process_course_selection(
    callback: CallbackQuery, course_content_service: CourseContentService
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    """
    logger.info(f"Entering process_course_selection for callback: {callback.data}")
    await callback.answer()
    telegram_id = callback.from_user.id
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É—Ä—Å–∞ –∏–∑ callback_data
    try:
        course_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        logger.error(f"Invalid course_id in callback data: {callback.data}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—É—Ä—Å–∞.", show_alert=True)
        return

    logger.info(
        f"Fetching course content for course_id: {course_id}, telegram_id: {telegram_id}"
    )
    result = await course_content_service.get_course_content(telegram_id, course_id)

    if not result["success"]:
        logger.warning(
            f"Failed to get course content for course_id: {course_id}. Message: {result.get('message')}"
        )
        await callback.answer(result.get("message", "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."), show_alert=True)
        return

    course = result["course"]
    topics = result["topics"]
    logger.info(
        f"Course content received: {course['title']}, Topics count: {len(topics)}"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞ –∏ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º
    message_text = f"<b>üìñ {course['title']}</b>\n"
    if course["description"]:
        message_text += f"{course['description']}\n"
    message_text += "\n–°–ø–∏—Å–æ–∫ —Ç–µ–º:\n"

    buttons = []
    for topic in topics:
        title = topic["title"]
        if topic["is_read"]:
            title = f"‚úîÔ∏è {title}"
        # CallbackData –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        cb_data = CourseMenuCallback(
            action="topic", course_id=course_id, topic_id=topic["id"], page=1
        ).pack()
        buttons.append([(title, cb_data)])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤
    buttons.append([("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", "courses_list")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_status = course.get("test_status")
    test_score = course.get("test_score")
    test_button_text = "üìù –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    test_callback_data = f"test_action:start:{course['id']}"

    if test_status == "completed_passed":
        test_button_text = f"‚úîÔ∏è –¢–µ—Å—Ç —Å–¥–∞–Ω ({test_score}%)"
        test_callback_data = (
            f"test_action:show_results:{course['id']}"  # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        )
    elif test_status == "completed_failed":
        test_button_text = f"‚ùå –¢–µ—Å—Ç –Ω–µ —Å–¥–∞–Ω ({test_score}%) - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
        test_callback_data = (
            f"test_action:start:{course['id']}"  # –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ/–ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        )

    buttons.append([(test_button_text, test_callback_data)])

    keyboard = InlineKeyboardBuilder.create_inline_kb(buttons)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
        logger.info("Previous message deleted in process_course_selection.")
    except Exception as e:
        logger.error(f"Error deleting message in process_course_selection: {e}")

    await callback.message.answer(text=message_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(CourseMenuCallback.filter(F.action == "topic"))
async def process_topic_selection(
    callback: CallbackQuery,
    callback_data: CourseMenuCallback,
    bot: Bot,
    course_content_service: CourseContentService,
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
    """
    logger.info(f"Entering process_topic_selection for callback: {callback.data}")
    await callback.answer()
    if callback_data.action != "topic":
        return
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback_data
    course_id = callback_data.course_id
    topic_id = callback_data.topic_id
    page = callback_data.page
    logger.info(
        f"Processing topic selection: course_id={course_id}, topic_id={topic_id}, page={page}"
    )

    telegram_id = callback.from_user.id
    result = await course_content_service.get_topic_content(
        telegram_id, course_id, topic_id
    )

    if not result["success"]:
        logger.warning(
            f"Failed to get topic content for topic_id: {topic_id}. Message: {result.get('message')}"
        )
        await callback.answer(
            result.get("message", "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."), show_alert=True
        )
        return

    content = result["content"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–º—ã (—Ç–µ–∫—Å—Ç —Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–µ)
    caption_text = f"<b>üìå {content['title']}</b>\n"
    if content["description"]:
        caption_text += f"<i>{content['description']}</i>\n\n"
    else:
        caption_text += "\n"

    # –°–±–æ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫: —Å–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    buttons = []
    if content["main_text_readuser"] and content["text_content"]:
        text_cb = CourseMenuCallback(
            action="content_text", course_id=course_id, topic_id=topic_id, page=1
        ).pack()
        buttons.append([("üìñ –¢–µ–∫—Å—Ç", text_cb)])

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (PDF, Audio, Video)
    if content["has_pdf"]:
        buttons.append([("üìÑ PDF", f"content_type:{course_id}:{topic_id}:pdf")])
    if content["has_audio"]:
        buttons.append([("üéµ –ê—É–¥–∏–æ", f"content_type:{course_id}:{topic_id}:audio")])
    if content["has_video"]:
        buttons.append([("‚ñ∂Ô∏è –í–∏–¥–µ–æ", f"content_type:{course_id}:{topic_id}:video")])
    if content["main_text_webapp_readuser"]:
        base_url_for_webapp = (
            await settings_repo.get_url_web_app()
        )  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if base_url_for_webapp:
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —Å–ª–µ—à–∞
            base_url_for_webapp = base_url_for_webapp.rstrip("/")
            webapp_topic_url = f"{base_url_for_webapp}/webapp/topic/{topic_id}/text/"
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="üåê –û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç –≤ WebApp",
                        web_app=WebAppInfo(url=webapp_topic_url),
                    )
                ]
            )
        else:
            logger.warning("Base URL for WebApp is not set in bot settings.")

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º –∫—É—Ä—Å–∞
    back_cb = CourseMenuCallback(action="list_topics", course_id=course_id).pack()
    buttons.append([("üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", back_cb)])

    keyboard = InlineKeyboardBuilder.create_inline_kb(buttons)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å (—Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç)
    await callback.message.delete()

    if content.get("image_path") and os.path.exists(content["image_path"]):
        photo = FSInputFile(content["image_path"])
        await callback.message.answer_photo(
            photo=photo,
            caption=caption_text,
            reply_markup=keyboard,
            parse_mode="HTML",
        )
    else:
        await callback.message.answer(
            text=caption_text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True,
        )
    await callback.answer()


@router.callback_query(F.data.startswith("content_type:"))
async def process_content_type_selection(
    callback: CallbackQuery, course_content_service: CourseContentService
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (PDF, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ).
    """
    logger.info(
        f"Entering process_content_type_selection for callback: {callback.data}"
    )
    await callback.answer()
    parts = callback.data.split(":")
    try:
        telegram_id = callback.from_user.id
        course_id = int(parts[1])
        topic_id = int(parts[2])
        content_key = parts[3]  # 'pdf', 'audio', 'video'
        logger.info(
            f"Processing content type: course_id={course_id}, topic_id={topic_id}, content_key='{content_key}'"
        )
    except (IndexError, ValueError):
        logger.error(f"Invalid data in content_type callback: {callback.data}")
        await callback.answer(
            "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.", show_alert=True
        )
        return

    result = None

    if content_key == "pdf":
        logger.info(f"Fetching PDF for course {course_id}, topic {topic_id}")
        result = await course_content_service.get_pdf_file(
            telegram_id, course_id, topic_id
        )
    elif content_key == "audio":
        logger.info(f"Fetching audio for course {course_id}, topic {topic_id}")
        result = await course_content_service.get_audio_file(
            telegram_id, course_id, topic_id
        )
    elif content_key == "video":
        logger.info(f"Fetching video for course {course_id}, topic {topic_id}")
        result = await course_content_service.get_video_file(
            telegram_id, course_id, topic_id
        )
    else:
        logger.warning(f"Unknown content type: {content_key}")
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.", show_alert=True)
        return

    if result and result["success"]:
        file_info = result["file_info"]
        file_path = file_info["path"]
        file_title = file_info["title"]
        logger.info(f"File found: {file_path}, title: {file_title}")
        input_file = FSInputFile(file_path)
        try:
            if content_key == "pdf":
                await callback.message.answer_document(
                    input_file, caption=f"üìÑ {file_title}"
                )
            elif content_key == "audio":
                await callback.message.answer_audio(
                    input_file, caption=f"üéµ {file_title}"
                )
            elif content_key == "video":
                await callback.message.answer_video(
                    input_file, caption=f"‚ñ∂Ô∏è {file_title}"
                )
            logger.info(f"Successfully sent {content_key} file: {file_path}")
            await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
        except Exception as e:
            logger.error(f"Failed to send file {file_path}: {e}")
            await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}", show_alert=True)
    else:
        error_message = (
            result.get("message", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            if result
            else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞."
        )
        logger.warning(f"Failed to get file: {error_message}")
        await callback.answer(error_message, show_alert=True)


@router.callback_query(CourseMenuCallback.filter(F.action == "content_text"))
async def process_content_text(
    callback: CallbackQuery,
    callback_data: CourseMenuCallback,
    course_content_service: CourseContentService,
) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
    """
    await callback.answer()
    if callback_data.action != "content_text":
        return
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback_data
    course_id = callback_data.course_id
    topic_id = callback_data.topic_id
    page_num = callback_data.page
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–º—ã
    result = await course_content_service.get_topic_content(
        callback.from_user.id, course_id, topic_id
    )
    if not result.get("success"):
        await callback.answer(
            result.get("message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º—ã"), show_alert=True
        )
        return
    content = result["content"]
    if not content.get("main_text_readuser") or not content.get("text_content"):
        await callback.answer("–¢–µ–∫—Å—Ç —Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return
    cleaned = clean_html_for_telegram(content["text_content"])
    text_page, current_page, total_pages = paginate_text(cleaned, page_number=page_num)
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav = []
    if current_page > 1:
        prev_cb = CourseMenuCallback(
            action="content_text",
            course_id=course_id,
            topic_id=topic_id,
            page=current_page - 1,
        ).pack()
        nav.append(("‚¨ÖÔ∏è –ü—Ä–µ–¥.", prev_cb))
    nav.append((f"–°—Ç—Ä. {current_page}/{total_pages}", "noop"))
    if current_page < total_pages:
        next_cb = CourseMenuCallback(
            action="content_text",
            course_id=course_id,
            topic_id=topic_id,
            page=current_page + 1,
        ).pack()
        nav.append(("–°–ª–µ–¥. ‚û°Ô∏è", next_cb))
    buttons = []
    if nav:
        buttons.append(nav)
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Ç–µ–º—ã
    topic_cb = CourseMenuCallback(
        action="topic", course_id=course_id, topic_id=topic_id, page=page_num
    ).pack()
    buttons.append([("üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–µ", topic_cb)])
    keyboard = InlineKeyboardBuilder.create_inline_kb(buttons)
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Ç–µ–º—ã
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"Error deleting message before sending text page: {e}")
    await callback.message.answer(
        text_page,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


@router.callback_query(CourseMenuCallback.filter(F.action == "list_topics"))
async def process_list_topics(
    callback: CallbackQuery,
    callback_data: CourseMenuCallback,
    course_content_service: CourseContentService,
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º –∫—É—Ä—Å–∞.
    """
    await callback.answer()
    telegram_id = callback.from_user.id
    course_id = callback_data.course_id
    result = await course_content_service.get_course_content(telegram_id, course_id)
    if not result["success"]:
        await callback.answer(
            result.get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º."), show_alert=True
        )
        return

    course = result["course"]
    topics = result["topics"]

    message_text = f"<b>üìñ {course['title']}</b>\n"
    if course["description"]:
        message_text += f"{course['description']}\n"
    message_text += "\n–°–ø–∏—Å–æ–∫ —Ç–µ–º:\n"

    buttons = []
    for topic in topics:
        title = topic["title"]
        if topic["is_read"]:
            title = f"‚úîÔ∏è {title}"
        cb_data = CourseMenuCallback(
            action="topic", course_id=course_id, topic_id=topic["id"], page=1
        ).pack()
        buttons.append([(title, cb_data)])

    buttons.append([("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤", "courses_list")])

    keyboard = InlineKeyboardBuilder.create_inline_kb(buttons)

    try:
        await callback.message.delete()
    except Exception:
        pass

    await callback.message.answer(text=message_text, reply_markup=keyboard)
    await callback.answer()
