"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""

import os
from typing import Dict, Any, List, Optional
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
import logging

from app.bot.telegram.deps import UserService
from app.bot.telegram.states.registration import RegistrationStates
from app.bot.telegram.keyboards.registration import (
    get_registration_confirmation_keyboard,
    get_phone_keyboard,
    get_companies_keyboard,
    get_departments_keyboard,
    get_job_titles_keyboard,
    get_registration_edit_keyboard,
)
from app.bot.telegram.keyboards.main_kb import get_main_menu_keyboard
from app.bot.telegram.utils.messages import (
    get_welcome_message,
    get_registration_name_request,
    get_registration_phone_request,
    get_registration_email_request,
    get_registration_birth_date_request,
    get_registration_company_request,
    get_registration_department_request,
    get_registration_job_title_request,
    get_registration_confirmation,
    get_registration_success,
)
from app.organization.repositories import (
    CompanyRepository,
    DepartmentRepository,
    JobTitleRepository,
    SettingsBotRepository,
)


logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
router = Router(name="start_router")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
company_repo = CompanyRepository()
department_repo = DepartmentRepository()
job_title_repo = JobTitleRepository()
settings_repo = SettingsBotRepository()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(
    message: Message, state: FSMContext, user_service: UserService
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    logger.info(f"Entering cmd_start handler")
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
    telegram_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
    result = await user_service.register_user(
        telegram_id=telegram_id, username=username, full_name=None
    )

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"User registration result: {result}")
    if result.get("user"):
        print(f"User state: {result['user'].state}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if result.get("user") and result["user"].state == 1:  # STATE_ACTIVE
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from app.bot.telegram.keyboards.main_kb import get_main_menu_keyboard

        main_menu_keyboard = await get_main_menu_keyboard(telegram_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        start_image_path = await settings_repo.get_start_image_path()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if start_image_path and os.path.exists(start_image_path):
            photo = FSInputFile(start_image_path)
            await message.answer_photo(
                photo=photo,
                caption="<b>üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
                reply_markup=main_menu_keyboard,
            )
        else:
            await message.answer(
                "<b>üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
                reply_markup=main_menu_keyboard,
            )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    start_image_path = await settings_repo.get_start_image_path()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if start_image_path and os.path.exists(start_image_path):
        photo = FSInputFile(start_image_path)
        await message.answer_photo(
            photo=photo, caption=get_welcome_message(is_new_user=result["is_new"])
        )
    else:
        await message.answer(get_welcome_message(is_new_user=result["is_new"]))

    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(RegistrationStates.waiting_for_phone)
    await message.answer(
        get_registration_phone_request(), reply_markup=get_phone_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º
@router.message(RegistrationStates.waiting_for_phone, F.text)
async def process_phone_text(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(phone=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏
    await state.set_state(RegistrationStates.waiting_for_company)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    companies = await company_repo.get_all_companies()
    await message.answer(
        get_registration_company_request(),
        reply_markup=get_companies_keyboard(companies),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(RegistrationStates.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await state.update_data(phone=message.contact.phone_number)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏
    await state.set_state(RegistrationStates.waiting_for_company)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    companies = await company_repo.get_all_companies()
    await message.answer(
        get_registration_company_request(),
        reply_markup=get_companies_keyboard(companies),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
@router.callback_query(
    RegistrationStates.waiting_for_company, F.data.startswith("registration:company:")
)
async def process_company_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ callback_data
    company_id = int(callback.data.split(":", 2)[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(company_id=company_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
    await state.set_state(RegistrationStates.waiting_for_department)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    departments = await department_repo.get_departments_by_company(company_id)

    await callback.message.edit_text(
        get_registration_department_request(),
        reply_markup=get_departments_keyboard(departments),
    )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
@router.callback_query(
    RegistrationStates.waiting_for_department,
    F.data.startswith("registration:department:"),
)
async def process_department_selection(
    callback: CallbackQuery, state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –∏–∑ callback_data
    department_id = int(callback.data.split(":", 2)[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(department_id=department_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    await state.set_state(RegistrationStates.waiting_for_job_title)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
    job_titles = await job_title_repo.get_job_titles_by_department(department_id)

    # –ï—Å–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    if not job_titles:
        job_titles = await job_title_repo.get_all_job_titles()

    await callback.message.edit_text(
        get_registration_job_title_request(),
        reply_markup=get_job_titles_keyboard(job_titles),
    )

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
@router.callback_query(
    RegistrationStates.waiting_for_job_title,
    F.data.startswith("registration:job_title:"),
)
async def process_job_title_selection(
    callback: CallbackQuery, state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–∑ callback_data
    job_title_id = int(callback.data.split(":", 2)[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(job_title_id=job_title_id)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –§–ò–û
    await state.set_state(RegistrationStates.waiting_for_full_name)
    await callback.message.edit_text(get_registration_name_request())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
@router.message(RegistrationStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(full_name=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É email
    await state.set_state(RegistrationStates.waiting_for_email)
    await message.answer(get_registration_email_request())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email
@router.message(RegistrationStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(email=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    await state.set_state(RegistrationStates.waiting_for_birth_date)
    await message.answer(get_registration_birth_date_request())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@router.message(RegistrationStates.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(date_of_birth=message.text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö
    await state.set_state(RegistrationStates.waiting_for_confirmation)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    confirmation_message = await get_registration_confirmation(user_data)

    await message.answer(
        confirmation_message,
        reply_markup=get_registration_confirmation_keyboard(),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("registration:"))
async def process_registration_callback(
    callback: CallbackQuery, state: FSMContext, user_service: UserService
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    action = callback.data.split(":", 1)[1]

    # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (
        action.startswith("company:")
        or action.startswith("department:")
        or action.startswith("job_title:")
    ):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
    current_state = await state.get_state()
    user_data = await state.get_data()

    if action == "confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        telegram_id = callback.from_user.id
        username = callback.from_user.username

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await user_service.register_user(
            telegram_id=telegram_id, username=username, **user_data
        )

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user_service.update_user_status(
            telegram_id=telegram_id, status=1  # STATE_ACTIVE
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        success_message = get_registration_success()

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        main_menu_keyboard = await get_main_menu_keyboard(telegram_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(success_message, reply_markup=main_menu_keyboard)

    elif action == "edit":
        confirmation_message = await get_registration_confirmation(user_data)
        await callback.message.edit_text(
            confirmation_message,
            reply_markup=get_registration_edit_keyboard(),
        )

    elif action.startswith("edit_"):
        field = action.split("_")[1]

        if field == "phone":
            await state.set_state(RegistrationStates.waiting_for_phone)
            await callback.message.edit_text(get_registration_phone_request())
            await callback.message.answer(
                get_registration_phone_request(), reply_markup=get_phone_keyboard()
            )

        elif field == "name":
            await state.set_state(RegistrationStates.waiting_for_full_name)
            await callback.message.edit_text(get_registration_name_request())

        elif field == "email":
            await state.set_state(RegistrationStates.waiting_for_email)
            await callback.message.edit_text(get_registration_email_request())

        elif field == "birth_date":
            await state.set_state(RegistrationStates.waiting_for_birth_date)
            await callback.message.edit_text(get_registration_birth_date_request())

        elif field == "company":
            await state.set_state(RegistrationStates.waiting_for_company)
            companies = await company_repo.get_all_companies()
            await callback.message.edit_text(
                get_registration_company_request(),
                reply_markup=get_companies_keyboard(companies),
            )

        elif field == "department":
            company_id = user_data.get("company_id")
            if company_id:
                await state.set_state(RegistrationStates.waiting_for_department)
                departments = await department_repo.get_departments_by_company(
                    company_id
                )
                await callback.message.edit_text(
                    get_registration_department_request(),
                    reply_markup=get_departments_keyboard(departments),
                )
            else:
                # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
                await state.set_state(RegistrationStates.waiting_for_company)
                companies = await company_repo.get_all_companies()
                await callback.message.edit_text(
                    get_registration_company_request(),
                    reply_markup=get_companies_keyboard(companies),
                )

        elif field == "job_title":
            department_id = user_data.get("department_id")
            if department_id:
                await state.set_state(RegistrationStates.waiting_for_job_title)
                job_titles = await job_title_repo.get_job_titles_by_department(
                    department_id
                )
                if not job_titles:
                    job_titles = await job_title_repo.get_all_job_titles()
                await callback.message.edit_text(
                    get_registration_job_title_request(),
                    reply_markup=get_job_titles_keyboard(job_titles),
                )
            else:
                # –ï—Å–ª–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
                company_id = user_data.get("company_id")
                if company_id:
                    await state.set_state(RegistrationStates.waiting_for_department)
                    departments = await department_repo.get_departments_by_company(
                        company_id
                    )
                    await callback.message.edit_text(
                        get_registration_department_request(),
                        reply_markup=get_departments_keyboard(departments),
                    )
                else:
                    # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
                    await state.set_state(RegistrationStates.waiting_for_company)
                    companies = await company_repo.get_all_companies()
                    await callback.message.edit_text(
                        get_registration_company_request(),
                        reply_markup=get_companies_keyboard(companies),
                    )

    await callback.answer()
