from typing import List, Dict, Any, Optional, Set

from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback_data –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
CB_TEST_ANSWER_SELECT = "test_ans:select"
CB_TEST_QUESTION_NEXT = "test_qst:next"
CB_TEST_ACTION_FINISH = "test_act:finish"


def build_question_keyboard(
    question_id: int,
    options: List[Dict[str, Any]],
    is_multiple_choice: bool,
    course_id: int,
    all_questions_ids_str: str,
    current_question_index: int,
    total_questions: int,
    selected_answers_ids: Optional[Set[int]] = None,
) -> InlineKeyboardBuilder:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞.

    Args:
        question_id: ID —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
        options: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ ({'id': int, 'text': str, 'order': int}).
        is_multiple_choice: True, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –¥–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤.
        course_id: ID –∫—É—Ä—Å–∞.
        all_questions_ids_str: –°—Ç—Ä–æ–∫–∞ —Å ID –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç–æ–π.
        current_question_index: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (0-based).
        total_questions: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ.
        selected_answers_ids: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.

    Returns:
        InlineKeyboardBuilder: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    builder = InlineKeyboardBuilder()
    if selected_answers_ids is None:
        selected_answers_ids = set()

    for option in sorted(options, key=lambda opt: opt.get("order", 0)):
        option_id = option["id"]
        option_text = option["text"]
        prefix = "‚òëÔ∏è " if option_id in selected_answers_ids else "‚óªÔ∏è "
        if not is_multiple_choice and option_id in selected_answers_ids:
            prefix = "üîò "  # –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        elif not is_multiple_choice:
            prefix = "‚ö™Ô∏è "

        # Callback_data –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
        # test_ans:select:<course_id>:<q_idx>:<all_q_ids_str>:<q_id>:<opt_id>:<is_multi_0_or_1>
        # –ü–æ–∫–∞ —á—Ç–æ —Å–¥–µ–ª–∞–µ–º callback, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.
        is_multi_flag = 1 if is_multiple_choice else 0
        callback_data = f"{CB_TEST_ANSWER_SELECT}:{course_id}:{current_question_index}:{all_questions_ids_str}:{question_id}:{option_id}:{is_multi_flag}"
        builder.row(
            InlineKeyboardButton(
                text=f"{prefix}{option_text}", callback_data=callback_data
            )
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    nav_buttons = []
    # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∏–ª–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
    if current_question_index < total_questions - 1:
        # test_qst:next:<course_id>:<q_idx>:<all_q_ids_str>
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Ö –≥–¥–µ-—Ç–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–æ "–î–∞–ª–µ–µ"
        # –ü–æ–∫–∞ TestService –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ –Ω–∞–∂–∞—Ç–∏—è "–ó–∞–≤–µ—Ä—à–∏—Ç—å", —Ç–∞–∫ —á—Ç–æ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –≤ CB.
        next_cb_data = f"{CB_TEST_QUESTION_NEXT}:{course_id}:{current_question_index}:{all_questions_ids_str}"
        nav_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=next_cb_data)
        )
    else:
        # test_act:finish:<course_id>:<all_q_ids_str>
        # all_q_ids_str —Ç—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–µ–Ω, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ FSM,
        # –Ω–æ –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç CB, —Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.
        # –ü–æ–∫–∞ TestService.submit_test –æ–∂–∏–¥–∞–µ—Ç course_id –∏ user_answers (–∫–æ—Ç–æ—Ä—ã–µ –º—ã –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –≤ FSM –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å)
        finish_cb_data = f"{CB_TEST_ACTION_FINISH}:{course_id}"
        nav_buttons.append(
            InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç üèÅ", callback_data=finish_cb_data)
        )

    builder.row(*nav_buttons)
    return builder
