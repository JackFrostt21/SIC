from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.utils.callback_data import CallbackData
from asgiref.sync import sync_to_async
from django.apps import apps
import re
from django.db.models import Q
import os
from django.utils.safestring import mark_safe

from app.bot.models import UserTest
from app.bot.models.telegram_user import TelegramUser, UserRead
from app.educational_module.models import TopicQuestion, TrainingCourse, CourseTopic
from .testing_logic import counting_correct_answers, save_user_answer
from ...functions import (
    load_bot_logo,
    load_test_result_image,
    load_test_start_image,
    paginate_text,
    remove_unsupported_html_tags,
    clear_user_test,
    get_selected_answers,
)
from ...lang_middleware import setup_middleware
from ....loader import dp
from app.bot.management.commands.bot_logic.kb.kb import (
    course_menu_kb_generator,
    topic_menu_kb_generator,
    subtopic_menu_kb_generator,
    content_menu_kb_generator,
)
from app.bot.management.commands.bot_logic.callbackfactory import (
    topic_menu,
    begin_test,
    content_selection,
    pdf_callback,
    audio_callback,
    video_callback
)

i18n = setup_middleware(dp)
_ = i18n.gettext


@dp.callback_query_handler(topic_menu.filter(info="course"))
async def back_to_courses(callback: CallbackQuery, callback_data: dict):
    user_id = callback.from_user.id
    user = await sync_to_async(TelegramUser.objects.get)(user_id=user_id)
    kb = await course_menu_kb_generator(user)

    image_path = user.company.image_list_courses.path
    if os.path.exists(image_path):
        media = types.InputFile(image_path)
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=media,
            caption=_("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫—É—Ä—Å–æ–≤"),
            parse_mode="HTML",
            reply_markup=kb,
        )
    else:
        await callback.message.delete()
        await callback.message.answer(
            _("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫—É—Ä—Å–æ–≤"), parse_mode="HTML", reply_markup=kb
        )


@sync_to_async
def get_questions(
    course_id, question_id, next_question, user_id, selected_answers=None
):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[], row_width=1)

    user = TelegramUser.objects.get(user_id=user_id)
    course = TrainingCourse.objects.get(id=course_id)
    course.user.add(user)

    UserTest.objects.get_or_create(
        user=TelegramUser.objects.get(user_id=user_id),
        training=TrainingCourse.objects.get(id=course_id),
    )
    if selected_answers is None:
        selected_answers = []

    try:
        questions = list(
            TopicQuestion.objects.filter(
                training__id=course_id, is_actual=True
            ).order_by("id")
        )
        total_questions = len(questions)
        next_question = int(next_question)
        if next_question < 0 or next_question >= total_questions:
            return None, None

        question = questions[next_question]
        curr_question_order = next_question
        user.current_question_index = curr_question_order
        user.save()
        answers = question.answer_options.all()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
        is_multiple_choice = question.is_multiple_choice
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if is_multiple_choice:
            unselected_symbol = "‚óªÔ∏è"
            selected_symbol = "üü©"
        else:
            unselected_symbol = "‚ö™"
            selected_symbol = "üü¢"

        text = ""
        for answer, index in zip(answers, ("A", "B", "C", "D",)):
            button_text = f"{unselected_symbol} {answer.number}"
            if str(answer.id) in selected_answers:
                button_text = f"{selected_symbol} {answer.number}"
            kb.add(
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=begin_test.new(
                        info="select_answer",
                        course_id=course_id,
                        question_id=question.id,
                        next_question=curr_question_order,
                        answer_id=answer.id,
                    ),
                )
            )
            text += f"<b>{index})</b> {answer.text}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ—Å–ª–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
        if is_multiple_choice:
            caption_text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"
        else:
            caption_text = "–í—ã–±–µ—Ä–∏—Ç–µ 1 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"

        content = (
            f"<b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>"
            f"\n\n–í–æ–ø—Ä–æ—Å ({curr_question_order + 1} –∏–∑ {total_questions})"
            f"\n\n<i>{question.title}</i>"
            f"\n\n{text}"
            f"\n{caption_text}"
        )

        nav_buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–≤–ø–µ—Ä–µ–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
        if curr_question_order < total_questions - 1 and selected_answers:
            nav_buttons.append(
                types.InlineKeyboardButton(
                    text="ü†Ü –≤–ø–µ—Ä–µ–¥",
                    callback_data=begin_test.new(
                        info="next_question",
                        course_id=course_id,
                        question_id=question.id,
                        next_question=curr_question_order + 1,
                        answer_id="-",
                    ),
                )
            )

        if nav_buttons:
            kb.row(*nav_buttons)

        kb.add(
            types.InlineKeyboardButton(
                text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                callback_data=begin_test.new(
                    info="finish_test",
                    course_id=course_id,
                    question_id=question.id,
                    next_question="-",
                    answer_id="-",
                ),
            )
        )

        return kb, content

    except IndexError as Ex:
        print(Ex)
        user.current_question_index = 1
        user.testing_process = False
        user.save()

        return None, None


@dp.callback_query_handler(begin_test.filter(info="on_test"))
async def start_test(callback: CallbackQuery, callback_data: dict):
    try:
        user_id = callback.from_user.id
        course_id = callback_data.get("course_id")

        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
        await clear_user_test(user_id, course_id)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –º–æ–¥–µ–ª–∏ TrainingCourse
        training_course = await sync_to_async(TrainingCourse.objects.get)(id=course_id)
        if training_course.image_course:
            start_image_path = training_course.image_course.path
            media = types.InputFile(start_image_path)
        else:
            media = None

        kb, sub_content = await get_questions(
            course_id, callback_data.get("question_id"), 0, user_id
        )

        if kb:
            content = ""
            if media:
                photo = types.InputMediaPhoto(
                    media, caption=f"{content}\n{sub_content}"
                )
                await callback.message.edit_media(media=photo, reply_markup=kb)
            else:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await callback.message.edit_caption(caption=f"{content}\n{sub_content}", reply_markup=kb)
        else:
            if sub_content:
                await callback.message.answer(sub_content)

    except Exception as e:
        print(e)



@dp.callback_query_handler(begin_test.filter())
async def handle_test_navigation(callback: CallbackQuery, callback_data: dict):
    try:
        kb = None
        sub_content = ""
        user_id = callback.from_user.id
        course_id = callback_data.get("course_id")
        question_id = callback_data.get("question_id")
        next_question = callback_data.get("next_question")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ TrainingCourse
        training_course = await sync_to_async(TrainingCourse.objects.get)(id=course_id)
        if training_course.image_course:
            image_path = training_course.image_course.path
            media = types.InputFile(image_path)
        else:
            media = None

        match callback_data.get("info"):
            case "on_test":
                await clear_user_test(user_id, course_id)  # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                selected_answers = []
                kb, sub_content = await get_questions(
                    course_id, question_id, 0, user_id, selected_answers
                )

            case "select_answer":
                answer_id = callback_data.get("answer_id")
                question_id = callback_data.get("question_id")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
                selected_answers = await get_selected_answers(user_id, course_id, question_id)

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
                question = await sync_to_async(TopicQuestion.objects.get)(id=question_id)
                is_multiple_choice = question.is_multiple_choice

                if is_multiple_choice:
                    # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
                    if answer_id in selected_answers:
                        selected_answers.remove(answer_id)
                    else:
                        selected_answers.append(answer_id)
                else:
                    # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∑–∞–º–µ–Ω—è–µ–º –æ—Ç–≤–µ—Ç
                    selected_answers = [answer_id]

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                await save_user_answer(
                    user_id,
                    answer_id,
                    question_id,
                    course_id,
                )

                kb, sub_content = await get_questions(
                    course_id,
                    question_id,
                    callback_data.get("next_question"),
                    user_id,
                    selected_answers,
                )

            case "next_question":
                next_question = int(callback_data.get("next_question"))

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                questions = await sync_to_async(list)(
                    TopicQuestion.objects.filter(
                        training__id=course_id, is_actual=True
                    ).order_by("id")
                )

                if next_question >= len(questions):
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –µ–≥–æ ID
                next_question_obj = questions[next_question]
                next_question_id = str(next_question_obj.id)

                # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                selected_answers = await get_selected_answers(user_id, course_id, next_question_id)

                kb, sub_content = await get_questions(
                    course_id,
                    next_question_id,
                    next_question,
                    user_id,
                    selected_answers,
                )

            case "finish_test":
                user_test = await sync_to_async(UserTest.objects.get)(
                    user__user_id=callback.from_user.id,
                    training__id=callback_data.get("course_id"),
                )
                current_user_answer = user_test.user_answer

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
                all_questions = await sync_to_async(list)(
                    TopicQuestion.objects.filter(
                        training__id=callback_data.get("course_id")
                    ).values_list("id", flat=True)
                )
                all_questions = list(map(str, all_questions))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º —Å is_correct = False
                for question_id in all_questions:
                    if not any(
                        result["question_id"] == question_id
                        for result in current_user_answer["results"]
                    ):
                        current_user_answer["results"].append(
                            {
                                "question_id": question_id,
                                "answer_id": [],
                                "is_correct": False,
                            }
                        )

                user_test.user_answer = current_user_answer
                await sync_to_async(user_test.save)()                
                
                # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                sub_content = await counting_correct_answers(
                    callback.from_user.id, callback_data.get("course_id")
                )
                await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤–æ–ø—Ä–æ—Å–æ–º

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —Ç–µ—Å—Ç
                test_passed = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª–∏ —Ç–µ—Å—Ç" in sub_content

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                result_image_path = await load_test_result_image(
                    callback.from_user.id, test_passed
                )
                media = (
                    types.InputFile(result_image_path) if result_image_path else None
                )

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                kb = types.InlineKeyboardMarkup()
                kb.add(
                    types.InlineKeyboardButton(
                        text="‚Üê –ù–∞–∑–∞–¥",
                        callback_data=topic_menu.new(
                            info='topic',
                            course_id=callback_data.get("course_id"),
                            topic_id='-',
                            subtopic_id='-',
                            page=0
                        )
                    )
                )

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                if media:
                    await callback.message.answer_photo(
                        photo=media, caption=sub_content, reply_markup=kb
                    )
                else:
                    await callback.message.answer(sub_content, reply_markup=kb)

                return  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        if kb:
            content = ""
            if media:
                photo = types.InputMediaPhoto(
                    media, caption=f"{content}\n{sub_content}"
                )
                await callback.message.edit_media(media=photo, reply_markup=kb)
            else:
                await callback.message.edit_caption(caption=f"{content}\n{sub_content}", reply_markup=kb)
        else:
            if sub_content and callback_data.get("info") != "finish_test":
                await callback.message.answer(sub_content)

    except Exception as e:
        print(e)


@dp.callback_query_handler(topic_menu.filter())
async def topic_menu_handler(callback: CallbackQuery, callback_data: dict):
    try:
        kb = None
        sub_content = ""
        image_course = None
        image_topic = None

        page = int(callback_data.get("page", 0))

        telegram_user_id = callback.from_user.id

        try:
            user = await sync_to_async(TelegramUser.objects.get)(
                user_id=telegram_user_id
            )
            internal_user_id = user.id
        except TelegramUser.DoesNotExist:
            await callback.answer("User not found in the database.", show_alert=True)
            return

        match callback_data.get("info"):
            case "in_subtopic":
                kb, sub_content, image_topic = await subtopic_menu_kb_generator(
                    callback_data.get("course_id"),
                    callback_data.get("topic_id"),
                    internal_user_id,
                    page,
                )
            case "subtopic":
                kb, sub_content, image_topic = await subtopic_menu_kb_generator(
                    callback_data.get("course_id"),
                    callback_data.get("topic_id"),
                    internal_user_id,
                    page,
                )
            case "topic":
                kb, sub_content, image_course = await topic_menu_kb_generator(
                    callback_data.get("course_id"), internal_user_id, page
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –∑–∞–ø–∏—Å–∏ –≤ UserRead –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ç–µ–º—É –∫—É—Ä—Å–∞
                topic_id = callback_data.get("topic_id")
                if topic_id != "-":
                    user_read, created = await sync_to_async(
                        UserRead.objects.get_or_create
                    )(
                        user=user,
                        course_id=callback_data.get("course_id"),
                        topic_id=topic_id,
                        defaults={"is_read": True},
                    )
                    if created:
                        print("Created new UserRead record")
                    else:
                        user_read.is_read = True
                        await sync_to_async(user_read.save)()

            case "course":
                kb = await course_menu_kb_generator(user)

        # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏ —Ç–æ–ª—å–∫–æ –∏–∑ sub_content —Å—Ç—Ä–∞–Ω–∏—Ü
        sub_content = remove_unsupported_html_tags(sub_content)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if image_topic:
            with open(f"media/{image_topic}", "rb") as file:
                photo = types.InputMediaPhoto(file, caption=sub_content)
                await callback.message.edit_media(media=photo, reply_markup=kb)
                file.close()
        elif image_course:
            with open(f"media/{image_course}", "rb") as file:
                photo = types.InputMediaPhoto(file, caption=sub_content)
                await callback.message.edit_media(media=photo, reply_markup=kb)
                file.close()
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            title, content, photo = await load_bot_logo("tag", callback.from_user.id)
            # kb.add(types.InlineKeyboardButton(text=_('btn_close'),
            #                                   callback_data='btn_done'))

            with open(f"media/{photo}", "rb") as file:
                photo = types.InputMediaPhoto(file, caption=f"{content}\n{sub_content}")
                await callback.message.edit_media(media=photo, reply_markup=kb)
                file.close()
    except Exception as e:
        print(e)


@dp.callback_query_handler(content_selection.filter())
async def content_selection_handler(callback: CallbackQuery, callback_data: dict):
    try:
        # –ï—Å–ª–∏ action == 'ignore', –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ callback –∏ –Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback_data.get("action") == "ignore":
            await callback.answer()  # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ callback, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return

        page = int(callback_data.get("page", 0))
        course_id = callback_data.get("course_id")
        topic_id = callback_data.get("topic_id")
        telegram_user_id = callback.from_user.id

        kb = None
        sub_content = ""
        image_topic = None

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        user = await sync_to_async(TelegramUser.objects.get)(user_id=telegram_user_id)
        internal_user_id = user.id

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        match callback_data.get("action"):
            case "select_content":
                kb, sub_content, image_topic = await subtopic_menu_kb_generator(
                    course_id, topic_id, internal_user_id, page
                )
            case "content":
                kb, sub_content, image_topic = await content_menu_kb_generator(
                    course_id, topic_id, page
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ UserRead –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–º—ã"
                user_read, created = await sync_to_async(
                    UserRead.objects.get_or_create
                )(
                    user=user,
                    course_id=course_id,
                    topic_id=topic_id,
                    defaults={"is_read": True},
                )
                if created:
                    print("Created new UserRead record")
                else:
                    user_read.is_read = True
                    await sync_to_async(user_read.save)()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞
                updated_user_read = await sync_to_async(UserRead.objects.get)(
                    user=user, course_id=course_id, topic_id=topic_id
                )

        # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏ —Ç–æ–ª—å–∫–æ –∏–∑ sub_content —Å—Ç—Ä–∞–Ω–∏—Ü
        sub_content = remove_unsupported_html_tags(sub_content)

        if image_topic:
            with open(f"media/{image_topic}", "rb") as file:
                photo = types.InputMediaPhoto(file, caption=sub_content)
                await callback.message.edit_media(media=photo, reply_markup=kb)
                file.close()
        else:
            await callback.message.edit_reply_markup(reply_markup=kb)
            await callback.message.answer(sub_content)

    except Exception as e:
        print(f"Error in content_selection_handler: {e}")


@dp.callback_query_handler(pdf_callback.filter())
async def pdf_button_handler(callback: types.CallbackQuery, callback_data: dict):
    try:
        course_id = callback_data.get("course_id")
        topic_id = callback_data.get("topic_id")
        if not course_id or not topic_id:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç CourseTopic
        CourseTopic = apps.get_model('educational_module', 'CourseTopic')
        topic = await sync_to_async(CourseTopic.objects.get)(id=topic_id)

        # –ï—Å–ª–∏ PDF –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–æ–ª–µ pdf_file, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if not topic.pdf_file:
            await callback.answer("PDF –Ω–µ —É–∫–∞–∑–∞–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        pdf_path = topic.pdf_file.path
        if not os.path.exists(pdf_path):
            await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–Ω–∞–∑–∞–¥" —á–µ—Ä–µ–∑ subtopic_menu_kb_generator
        from app.bot.management.commands.bot_logic.kb.kb import subtopic_menu_kb_generator
        internal_user_id = callback.from_user.id  # –∏—Å–ø–æ–ª—å–∑—É–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        kb_back, _, _ = await subtopic_menu_kb_generator(course_id, topic_id, internal_user_id, page=0)

        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äì —É–¥–∞–ª—è–µ–º –µ–≥–æ, —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Ç–∏–ø –Ω–µ–ª—å–∑—è
        try:
            await callback.message.delete()
        except Exception as e_del:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", e_del)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        with open(pdf_path, "rb") as pdf_file:
            await callback.message.answer_document(
                document=pdf_file,
                caption="PDF –¥–æ–∫—É–º–µ–Ω—Ç",
                reply_markup=kb_back
            )
        await callback.answer("PDF –æ—Ç–∫—Ä—ã—Ç", show_alert=False)
    except Exception as e:
        print("Exception in pdf_button_handler:", e)
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@dp.callback_query_handler(audio_callback.filter())
async def audio_button_handler(callback: types.CallbackQuery, callback_data: dict):
    try:
        course_id = callback_data.get("course_id")
        topic_id = callback_data.get("topic_id")
        if not course_id or not topic_id:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç CourseTopic
        CourseTopic = apps.get_model('educational_module', 'CourseTopic')
        topic = await sync_to_async(CourseTopic.objects.get)(id=topic_id)

        # –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ –ø–æ–ª–µ audio_file, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if not topic.audio_file:
            await callback.answer("–ê—É–¥–∏–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        audio_path = topic.audio_file.path
        if not os.path.exists(audio_path):
            await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–Ω–∞–∑–∞–¥" —á–µ—Ä–µ–∑ subtopic_menu_kb_generator
        from app.bot.management.commands.bot_logic.kb.kb import subtopic_menu_kb_generator
        internal_user_id = callback.from_user.id  # –∏—Å–ø–æ–ª—å–∑—É–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        kb_back, _, _ = await subtopic_menu_kb_generator(course_id, topic_id, internal_user_id, page=0)

        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äì —É–¥–∞–ª—è–µ–º –µ–≥–æ, —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Ç–∏–ø –Ω–µ–ª—å–∑—è
        try:
            await callback.message.delete()
        except Exception as e_del:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", e_del)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        with open(audio_path, "rb") as audio_file:
            await callback.message.answer_document(
                document=audio_file,
                caption="–ê—É–¥–∏–æ —Ñ–∞–π–ª",
                reply_markup=kb_back
            )
        await callback.answer("–ê—É–¥–∏–æ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç", show_alert=False)
    except Exception as e:
        print("Exception in audio_button_handler:", e)
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@dp.callback_query_handler(video_callback.filter())
async def video_button_handler(callback: types.CallbackQuery, callback_data: dict):
    try:
        course_id = callback_data.get("course_id")
        topic_id = callback_data.get("topic_id")
        if not course_id or not topic_id:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç CourseTopic
        CourseTopic = apps.get_model('educational_module', 'CourseTopic')
        topic = await sync_to_async(CourseTopic.objects.get)(id=topic_id)

        # –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ –ø–æ–ª–µ audio_file, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if not topic.video_file:
            await callback.answer("–í–∏–¥–µ–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        video_path = topic.video_file.path
        if not os.path.exists(video_path):
            await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–Ω–∞–∑–∞–¥" —á–µ—Ä–µ–∑ subtopic_menu_kb_generator
        from app.bot.management.commands.bot_logic.kb.kb import subtopic_menu_kb_generator
        internal_user_id = callback.from_user.id  # –∏—Å–ø–æ–ª—å–∑—É–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        kb_back, _, _ = await subtopic_menu_kb_generator(course_id, topic_id, internal_user_id, page=0)

        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äì —É–¥–∞–ª—è–µ–º –µ–≥–æ, —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Ç–∏–ø –Ω–µ–ª—å–∑—è
        try:
            await callback.message.delete()
        except Exception as e_del:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", e_del)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        with open(video_path, "rb") as video_file:
            await callback.message.answer_document(
                document=video_file,
                caption="–í–∏–¥–µ–æ —Ñ–∞–π–ª",
                reply_markup=kb_back
            )
        await callback.answer("–í–∏–¥–µ–æ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç", show_alert=False)
    except Exception as e:
        print("Exception in audio_button_handler:", e)
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)