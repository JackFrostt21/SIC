from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import (
    KeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    CallbackQuery,
)
import aiohttp
from django.db import IntegrityError
from asgiref.sync import sync_to_async
from icecream import ic

from typing import (
    Union,
)

from app.bot.management.commands.bot_logic.functions import (
    user_exists,
    load_bot_logo,
    user_change_test_status,
)
from app.bot.management.commands.bot_logic.lang_middleware import setup_middleware
from app.bot.management.commands.bot_logic.states import LocaleRegSteps
from app.bot.management.commands.loader import dp

from app.bot.models.telegram_user import UserAction, TelegramUser, TelegramGroup
from app.bot.management.commands.bot_logic.kb.main_kb import building_main_menu
from app.educational_module.models import RegistrationSetting
# from app.bot.management.commands.bot_logic.kb.lightning_kb import building_main_menu_lightning

i18n = setup_middleware(dp)
_ = i18n.gettext

# @sync_to_async
# def is_user_in_lightning_group(user_id):
#     return TelegramGroup.objects.filter(lightning_group=True, users__id=user_id).exists()

@sync_to_async
def get_telegram_user(user_id):
    try:
        return TelegramUser.objects.get(user_id=user_id)
    except TelegramUser.DoesNotExist:
        return None

async def show_main_menu(message: types.Message):
    user = await get_telegram_user(message.from_user.id)

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    menu_keyboard = await building_main_menu(user.id)

    # –õ–æ–≥–æ—Ç–∏–ø –∏ –º–µ–Ω—é
    title, content, photo = await load_bot_logo("main_menu_logo", message.from_user.id)
    media = types.InputFile(photo)

    first_name = user.first_name if user.first_name else "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    middle_name = user.middle_name if user.middle_name else " "

    await message.answer_photo(
        photo=media,
        caption=f'{title},\n'
                f'<b>{first_name} {middle_name}</b>\n', 
        reply_markup=menu_keyboard,
    )


@sync_to_async
def update_user_info_in_edubot(telegram_id, regbot_data: dict):
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        user = TelegramUser.objects.get(user_id=telegram_id)
        
        user.user_name = regbot_data.get("telegram_user_name") or user.user_name
        user.tg_mention = regbot_data.get("telegram_user_name") or user.tg_mention

        user.save()
        return True
    except TelegramUser.DoesNotExist:
        return False
    except IntegrityError as ie:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {ie}")
        return False



# @dp.message_handler(commands=["start"], state="*")
# async def cmd_start(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
#     try:
#         # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ EDUBot –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å:
#         user_status = await user_exists(
#             message.from_user.id, 
#             message.from_user.full_name, 
#             message.from_user.mention
#         )

#         match user_status:
#             case TelegramUser.STATE_ACTIVE:
#                 # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ "–∞–∫—Ç–∏–≤–µ–Ω" –≤ EDUBot, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.
#                 await show_main_menu(message)

#             case TelegramUser.STATE_NOT_ACTIVE:
#                 # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
#                 reg_settings = await sync_to_async(RegistrationSetting.get_solo)()
#                 # –ï—Å–ª–∏ regbot_work=True, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ —Å—Ç—É—á–∞—Ç—å—Å—è –≤ RegBot
#                 if reg_settings.regbot_work:
#                     regbot_user_url = f"{reg_settings.url_regbot}{message.from_user.id}"
#                     print(f"–û–±—Ä–∞—â–∞–µ–º—Å—è –∫ RegBot –ø–æ URL: {regbot_user_url}")

#                     async with aiohttp.ClientSession() as session:
#                         try:
#                             async with session.get(regbot_user_url) as resp:
#                                 print(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status}")
                                
#                                 # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#                                 response_text = await resp.text()
#                                 print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")

#                                 if resp.status == 200:
#                                     # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ RegBot
#                                     regbot_data = await resp.json()
#                                     print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ RegBot: {regbot_data}")

#                                     # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç RegBot (–ü–†–û–í–ï–†–ò–¢–¨!!!)
#                                     await update_user_info_in_edubot(message.from_user.id, regbot_data)
#                                     # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫—É—Ä—Å–æ–≤
#                                     await show_main_menu(message)
#                                 elif resp.status == 404:
#                                     # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ RegBot –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
#                                     await message.answer(
#                                         text=(
#                                             "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º RegBot.\n"
#                                             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ:\n{reg_settings.bot_reg_url}"
#                                         )
#                                     )
#                                 else:
#                                     # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è —Å—Ç–∞—Ç—É—Å, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç 200 –∏–ª–∏ 404,
#                                     # —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API
#                                     await message.answer(
#                                         text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
#                                     )
#                         except Exception as api_exc:
#                             # –ï—Å–ª–∏ —Å–ª—É—á–∏–ª–∞—Å—å —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, —Ç–∞–π–º–∞—É—Ç –∏ —Ç.–ø.
#                             print(f"RegBot API error: {api_exc}")
#                             await message.answer(
#                                 text="–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ RegBot. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
#                             )
#                 else:
#                     title, content, photo = await load_bot_logo("welcome_logo", message.from_user.id)
#                     media = types.InputFile(photo)
#                     await message.answer_photo(
#                         photo=media,
#                         caption=(
#                             f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,\n"
#                             f"–≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç!\n\n"
#                             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n"
#                         ),
#                         reply_markup=types.ReplyKeyboardMarkup(
#                             keyboard=[[KeyboardButton("üá∑üá∫–†—É—Å—Å–∫–∏–π")]],
#                             resize_keyboard=True,
#                         ),
#                     )
#                     await LocaleRegSteps.set_language.set()

#             case TelegramUser.STATE_DELETED:
#                 await message.answer(
#                     text=_("–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."),
#                     reply_markup=types.ReplyKeyboardMarkup(
#                         keyboard=[[KeyboardButton("/start")]],
#                         resize_keyboard=True
#                     ),
#                 )

#     except Exception as e:
#         print(e)


@dp.message_handler(commands=["start"], state="*")
async def cmd_start(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ EDUBot –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å:
        user_status = await user_exists(
            message.from_user.id, 
            message.from_user.full_name, 
            message.from_user.mention
        )

        match user_status:
            case TelegramUser.STATE_ACTIVE:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ "–∞–∫—Ç–∏–≤–µ–Ω" –≤ EDUBot, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.
                await show_main_menu(message)

            case TelegramUser.STATE_NOT_ACTIVE:
                title, content, photo = await load_bot_logo("welcome_logo", message.from_user.id)
                media = types.InputFile(photo)
                await message.answer_photo(
                    photo=media,
                    caption=(
                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,\n"
                        f"–≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç!\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\n"
                    ),
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton("üá∑üá∫–†—É—Å—Å–∫–∏–π")]],
                        resize_keyboard=True,
                    ),
                )
                await LocaleRegSteps.set_language.set()

            case TelegramUser.STATE_DELETED:
                await message.answer(
                    text=_("–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."),
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton("/start")]],
                        resize_keyboard=True
                    ),
                )

    except Exception as e:
        print(e)


from . import callbackhandlers

ic(callbackhandlers)


@dp.callback_query_handler(text_contains="btn_done")
async def settings_set_done(call: CallbackQuery):
    try:
        await call.message.delete_reply_markup()
        await call.message.delete()
        match await user_exists(
            call.from_user.id, call.from_user.full_name, call.from_user.mention
        ):
            case 1:
                title, content, photo = await load_bot_logo(
                    "main_menu_logo", call.from_user.id
                )
                menu_keyboard = await building_main_menu(call.from_user.id)
                media = types.InputFile(photo)
                await call.message.answer_photo(
                    photo=media,
                    caption=f"<code>{title}\n"
                    f"{content}\n</code>"
                    f"<i>{call.from_user.full_name}</i>\n"
                    f" <b>{call.from_user.mention}</b>",
                    reply_markup=menu_keyboard,
                )
            case 0:
                title, content, photo = await load_bot_logo(
                    "welcome_logo", call.from_user.id
                )
                media = types.InputFile(photo)
                await call.message.answer_photo(
                    photo=media,
                    caption=f"<code>{title}\n"
                    f"{content}\n</code>"
                    f"<i>{call.from_user.full_name}</i>\n"
                    f" <b>{call.from_user.mention}</b>",
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[
                            [
                                KeyboardButton("üá∑üá∫–†—É—Å—Å–∫–∏–π"),
                                # KeyboardButton("üá∫üáøO'zbek"),
                                # KeyboardButton("üá¨üáßEnglish"),
                            ]
                        ],
                        resize_keyboard=True,
                    ),
                )
                await LocaleRegSteps.set_language.set()
            case 2:
                title, content, photo = await load_bot_logo(
                    "user_blocked_logo", call.from_user.id
                )
                content = _(
                    "The module will be available after the Administrator checks."
                )
                media = types.InputFile(photo)
                await call.message.answer_photo(
                    photo=media,
                    caption=f"<code>{title}\n"
                    f"{content}\n</code>"
                    f"<i>{call.from_user.full_name}</i>\n"
                    f" <b>{call.from_user.mention}</b>",
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton("/start")]], resize_keyboard=True
                    ),
                )
    except Exception as e:
        print(e)


@dp.callback_query_handler(state="*")
async def any_callback(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(InlineKeyboardMarkup())