class Doing:  # Абстракция
    def move(self):
        print("Car moving")

    def stop(self):
        print("Car stoping")


class Vehicle(Doing):  # Создаю класс ТранспСредство и наследую абстрактный класс
    def __init__(
        self, _type, speed, color
    ):  # устанавливаю атрибуты тип, скорость, цвет
        super().__init__()
        self._type = _type  # защищенный атрибут
        self.speed = speed
        self.color = color

    def info(self):
        print(f"Тип ТС: {self._type}, Скорость: {self.speed}, Цвет: {self.color}")


class Bycicle(
    Vehicle
):  # Создаю класс велосипед, наследую атрибуты класса ТС и добавляю атрибут кол-во колес и методы
    def __init__(self, _type, speed, color, wheel):
        super().__init__(_type, speed, color)
        self.wheel = wheel

    def offroad(self):
        print("Bycicle for offroad")

    def move(self):  # Полиморфизм
        print("Bycicle riding")

    def info(self):
        print(
            f"Тип велосипеда: {self._type}, Скорость: {self.speed}, Цвет: {self.color}, Количество колес: {self.wheel}"
        )


class Boat(
    Vehicle
):  # Создаю класс лодка, наследую атрибуты класса ТС и добавляю атрибут двигатель и методы
    def __init__(self, _type, speed, color, engine):
        super().__init__(_type, speed, color)
        self.engine = engine

    def open_sea(self):
        print("Boat for open sea")

    def move(self):  # Полиморфизм
        print("Boat swim")

    def info(self):
        print(
            f"Тип судна: {self._type}, Скорость: {self.speed}, Цвет: {self.color}, Наличие двигателя: {self.engine}"
        )


car = Vehicle("Седан", "120", "Белый")
bike = Bycicle("Детский", "15", "Красный", "4 колеса")
boat = Boat("Лодка", "25", "Желтая", "нет")

# вывод по объекту car
car.info()
car.move()
car.stop()
print()
# вывод по объекту bike
bike.info()
bike.offroad()
bike.move()
print()
# вывод по объекту boat
boat.info()
boat.open_sea()
boat.move()
