class Predator:  # Абстракция
    def hunt(self):
        print("Охотится...")


class Cat(
    Predator
):  # определяем новый класс. () - означает что класс не наследуется от другого класса
    def __init__(
        self, breed, color, age
    ):  # __init__ вызыв при создан объекта чтобы присвоить значения атрибутам. Метод называется конструктором -self ссылка на текущий объект, остальные атрибуты(параметры)
        super().__init__() #ОТРАБОТАЛО И БЕЗ МЕТОДА
        self._breed = breed  # self.breed - атрибут, breed - переменная
        self._color = color
        self._age = age

    @property  # Доступ на чтение к закрытым атрибутам
    def breed(self):
        return self._breed  # Закрываем атрибут для изменений

    @property
    def color(self):
        return self._color

    @property
    def age(self):
        return self._age

    @age.setter  # Разрешаем изменять параметр age в сторону увеличения
    def age(self, new_age):
        if new_age > self._age:
            self._age = new_age
        return self._age

    def meow(self):
        print("Мяу!")

    def purr(self):
        print("Мрррр")

    def sleep(self):  # Полиморфизм
        print("Свернулся в клубок и сладко спит.")


class HomeCat(Cat):  # Наследование класса
    def __init__(
        self, breed, color, age, owner, name
    ):  # Конструктор с новыми атрибутами
        super().__init__(
            breed, color, age
        )  # метод для наследования атрибутов класса-родителя
        self._owner = owner
        self._name = name

    @property
    def owner(self):
        return self._owner

    @property
    def name(self):
        return self._name

    def getTreat(self):
        print("Мяу-мяу")


class Parrot:
    def sleep(self):  # Полиморфизм
        print("Сел на жёрдочку и уснул.")


def homeSleep(animal):  # функция ожидает объект с методом sleep (Полиморфизм)
    animal.sleep()


cat = Cat("Абиссинская", "Рыжая", 4)

print(cat.breed)
print(cat.color)
print(cat.age)

# Проверка возможности изменять параметр age
cat.age = 5
print(cat.age)
cat.sleep()  # Полиморфизм
cat.hunt()  # Абстракция

# Проверка на недоступность атрибута breed для изменений
# cat.breed = 'Сиамская'
# print(cat.breed)

my_cat = HomeCat("Сиамская", "Белая", 3, "Иван", "Роза")

print(my_cat.owner)
print(my_cat.breed)
my_cat.getTreat()
my_cat.purr()
my_cat.hunt()  # Абстракция - проверка что наследование идёт через класс

parrot = Parrot()  # Полиморфизм
homeSleep(parrot)  # Полиморфизм
